name: Deploy Website

on:
  push:
    tags:
      - 'releases/*'

  workflow_dispatch:

concurrency:
  group: deploy-website
  cancel-in-progress: true

env:
  USERNAME: 'cicd'
  NGINX_USERNAME: 'root'
  HTML_STATIC_PATH: '/var/www/ofer_to'
  API_RELATIVE_PATH: 'api'
  DOCKER_RELATIVE_PATH: 'docker'
  OFER_TO_DOMAIN: 'ofer.to'
  SERVER_RSA_PATH: 'rsa_ssh'
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  API_IMAGE_NAME: 'danofer'

jobs:
  build_and_deploy_static:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.PROD_STATIC_SERVER_PRIVATE_KEY }}

      - name: Install Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18.17'

      - name: Compile
        working-directory: ./static
        run: |
          yarn && yarn build

      - name: Create Static Directory
        run: |
          # In case the directory does not exist
          set +e

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${NGINX_USERNAME}@${OFER_TO_DOMAIN}" rm -rf ${HTML_STATIC_PATH}

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${NGINX_USERNAME}@${OFER_TO_DOMAIN}" mkdir -p -- ${HTML_STATIC_PATH}

          set -e

      - name: Deploy
        working-directory: ./static/build
        run: |
          scp \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "../../${SERVER_RSA_PATH}" \
            -r \
            favicon.png \
            robots.txt \
            __data.json \
            bootstrap.bundle.min.js.map \
            bootstrap.bundle.min.js \
            main.jpg \
            index.html \
            _app \
            "${NGINX_USERNAME}@${OFER_TO_DOMAIN}:${HTML_STATIC_PATH}"

  # build_api:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     version: ${{ steps.version.outputs.result }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker-practice/actions-setup-docker@master
  #
  #     - name: Create Version
  #       id: version
  #       run: |
  #         MAJOR="$(echo ${GITHUB_REF} | sed -E 's/.*([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')"
  #         MINOR="$(echo ${GITHUB_REF} | sed -E 's/.*([0-9]+)\.([0-9]+)\.([0-9]+)$/\2/')"
  #         PATCH="$(echo ${GITHUB_REF} | sed -E 's/.*([0-9]+)\.([0-9]+)\.([0-9]+)$/\3/')"
  #
  #         VERSION="${MAJOR}.${MINOR}.${PATCH}"
  #         echo "VERSION=${VERSION}" >> ${GITHUB_ENV}
  #         echo "result=${VERSION}" >> ${GITHUB_OUTPUT}
  #
  #     - name: Build Docker Image
  #       working-directory: ./api
  #       run: |
  #         docker build \
  #           --file Danofer.build.Dockerfile \
  #           --tag "${DOCKER_USERNAME}/${API_IMAGE_NAME}:${VERSION}" \
  #           .
  #
  #     - name: Push Docker Image
  #       working-directory: ./api
  #       run: |
  #         docker login --username="${DOCKER_USERNAME}" --password="${DOCKER_PASSWORD}"
  #
  #         docker push "${DOCKER_USERNAME}/${API_IMAGE_NAME}:${VERSION}"

  build_api_run:
    # needs: ['build_api']
    runs-on: ubuntu-latest
    env:
      DOCKER_FILE: 'docker-compose.yaml'
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.CICD_SERVER_PRIVATE_KEY }}

      - name: Create API Directory
        run: |
          # In case the directory does not exist
          set +e

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${USERNAME}@${OFER_TO_DOMAIN}" rm -rf ${DIRECTORY}

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${USERNAME}@${OFER_TO_DOMAIN}" mkdir -p -- ${DIRECTORY}

          set -e
        env:
          DIRECTORY: ${{ env.API_RELATIVE_PATH }}

      - name: Copy Files
        working-directory: './api'
        run: |
          scp \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "../${SERVER_RSA_PATH}" \
            Danofer.run.Dockerfile ${DOCKER_FILE} \
            "${USERNAME}@${OFER_TO_DOMAIN}:./${API_RELATIVE_PATH}"

      - name: Build Local ofer.to Image
        working-directory: ./api
        run: |
          ../.github/scripts/api/build_danofer_image.sh
        env:
          VERSION: ${{ needs.build_api.outputs.version }}

  run_api_and_smtp_docker_images:
    needs: ['build_api_run']
    runs-on: ubuntu-latest
    env:
      DOCKER_FILE: 'compose.yaml'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.CICD_SERVER_PRIVATE_KEY }}

      - name: Create Docker Directory
        run: |
          # In case the directory does not exist
          set +e

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${USERNAME}@${OFER_TO_DOMAIN}" rm -rf ${DIRECTORY}

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${USERNAME}@${OFER_TO_DOMAIN}" mkdir -p -- ${DIRECTORY}

          set -e
        env:
          DIRECTORY: ${{ env.DOCKER_RELATIVE_PATH }}

      - name: Add SMTP Password to ENV_FILE
        working-directory: ./docker
        run: |
          echo "SMTP_PASSWORD='${{ secrets.SMTP_PASSWORD }}'" >> ${ENV_FILE}
        env:
          ENV_FILE: '.smtp.env'

      - name: Deploy ENV_FILE and Docker Compose file
        working-directory: ./docker
        run: |
          scp \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "../${SERVER_RSA_PATH}" \
            -r \
            ${DOCKER_FILE} ${ENV_FILE} \
            "${USERNAME}@${OFER_TO_DOMAIN}:./${DOCKER_RELATIVE_PATH}"
        env:
          ENV_FILE: '.smtp.env'

      - name: Run Local api.ofer.to and SMTP Server
        working-directory: ./docker
        run: |
          ../.github/scripts/run_docker_image
        env:
          DOCKER_COMPOSE_PATH: "${{ env.DOCKER_RELATIVE_PATH }}/${{ env.DOCKER_FILE }}"
          RSA_PATH: "../${{ env.SERVER_RSA_PATH }}"

  nginx:
    needs: ['build_and_deploy_static', 'run_api_and_smtp_docker_images']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.PROD_STATIC_SERVER_PRIVATE_KEY }}

      - name: Deploy TLS Certificate and Private Key
        run: |
          echo "${TLS_CERTIFICATE}" > ${TLS_CERTIFICATE_FILENAME}
          echo "${TLS_PRIVATE_KEY}" > ${TLS_PRIVATE_KEY_FILENAME}

          scp \
            -r \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${TLS_CERTIFICATE_FILENAME}" "${TLS_PRIVATE_KEY_FILENAME}" "${NGINX_USERNAME}@${OFER_TO_DOMAIN}:${TLS_ENCRYPTION_PATH}"
        env:
          TLS_PRIVATE_KEY: ${{ secrets.PROD_TLS_CERTIFICATE_PRIVATE_KEY }}
          TLS_CERTIFICATE: ${{ secrets.PROD_TLS_CERTIFICATE }}
          TLS_PRIVATE_KEY_FILENAME: './ofer_to.private.pem'
          TLS_CERTIFICATE_FILENAME: './star_ofer_to.crt'
          TLS_ENCRYPTION_PATH: '/etc/letsencrypt/live/ofer.to'

      - name: Deploy NGINX Confs
        working-directory: ./nginx_confs
        run: |
          echo "${DH_PARAM_CONTENT}" > "${DH_PARAM_FILENAME}"

          scp \
            -r \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "../${SERVER_RSA_PATH}" \
            ./nginx.conf ./${DH_PARAM_FILENAME} ./sites-available ./nginxconfig.io "${NGINX_USERNAME}@${OFER_TO_DOMAIN}:/etc/nginx"
        env:
          DH_PARAM_CONTENT: ${{ secrets.DH_PARAM }}
          DH_PARAM_FILENAME: 'dhparam.pem'

      - name: Enable sites
        run: |
          # Disable previous sites
          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${NGINX_USERNAME}@${OFER_TO_DOMAIN}" "find /etc/nginx/sites-enabled -type l | xargs rm"

          # Enable the static and api sites
          for file in 'static' 'api'; do
            ssh \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -i ${SERVER_RSA_PATH} \
              "${NGINX_USERNAME}@${OFER_TO_DOMAIN}" ln -s "/etc/nginx/sites-available/${file}.conf" /etc/nginx/sites-enabled/${file}.conf
          done

      - name: Restart NGINX
        run: |
          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${NGINX_USERNAME}@${OFER_TO_DOMAIN}" systemctl restart nginx
