name: Deploy Website

on:
  push:
    tags:
      - 'releases/*'

concurrency:
  group: deploy-website
  cancel-in-progress: true

env:
  USERNAME: 'cicd'
  ROOT_USERNAME: 'root'
  NGINX_USERNAME: 'cicd'
  HTML_STATIC_PATH: '/var/www/ofer_to'
  SUDOKU_STATIC_PATH: '/var/www/sudoku'
  TRANSIT_STATIC_PATH: '/var/www/transit'
  TRANSIT_API_IMAGE_NAME: 'transit_api'
  API_RELATIVE_PATH: 'api'
  DOCKER_RELATIVE_PATH: 'docker'
  OFER_TO_DOMAIN: 'ofer.to'
  SERVER_RSA_PATH: 'rsa_ssh'
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  API_IMAGE_NAME: 'danofer_run'
  TLS_ENCRYPTION_PATH: '/etc/letsencrypt/live/ofer.to'

jobs:
  create_directories:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.PROD_STATIC_SERVER_PRIVATE_KEY }}

      - name: Create Static Directory
        run: |
          # In case the directory does not exist
          set +e

          # Delete static www.ofer.to
          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${ROOT_USERNAME}@${OFER_TO_DOMAIN}" rm -rf ${HTML_STATIC_PATH}

          # Create static www.ofer.to
          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${ROOT_USERNAME}@${OFER_TO_DOMAIN}" mkdir -p -- ${HTML_STATIC_PATH}

          # Delete static sudo.ofer.to
          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${ROOT_USERNAME}@${OFER_TO_DOMAIN}" rm -rf ${SUDOKU_STATIC_PATH}

          # Create static sudo.ofer.to
          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${ROOT_USERNAME}@${OFER_TO_DOMAIN}" mkdir -p -- ${SUDOKU_STATIC_PATH}

          # Delete static transit.ofer.to
          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${ROOT_USERNAME}@${OFER_TO_DOMAIN}" rm -rf ${TRANSIT_STATIC_PATH}

          # Create static transit.ofer.to
          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${ROOT_USERNAME}@${OFER_TO_DOMAIN}" mkdir -p -- ${TRANSIT_STATIC_PATH}

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${ROOT_USERNAME}@${OFER_TO_DOMAIN}" chown ${NGINX_USERNAME}:${NGINX_USERNAME} ${HTML_STATIC_PATH} ${SUDOKU_STATIC_PATH} ${TRANSIT_STATIC_PATH} -R

          set -e

      - name: Create Docker Directory
        run: |
          # In case the directory does not exist
          set +e

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${USERNAME}@${OFER_TO_DOMAIN}" rm -rf ${DOCKER_RELATIVE_PATH}

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${USERNAME}@${OFER_TO_DOMAIN}" mkdir -p -- ${DOCKER_RELATIVE_PATH}

          set -e

      - name: Create TLS Directory
        run: |
          # In case the directory does not exist
          set +e

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${ROOT_USERNAME}@${OFER_TO_DOMAIN}" rm -rf ${TLS_ENCRYPTION_PATH}

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${ROOT_USERNAME}@${OFER_TO_DOMAIN}" mkdir -p -- ${TLS_ENCRYPTION_PATH}

          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${ROOT_USERNAME}@${OFER_TO_DOMAIN}" chown ${NGINX_USERNAME}:${NGINX_USERNAME} ${TLS_ENCRYPTION_PATH} -R

          set -e

  build_and_deploy_www:
    needs: ['create_directories']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.CICD_SERVER_PRIVATE_KEY }}

      - name: Install Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18.17'

      - name: Compile
        working-directory: ./static
        run: |
          yarn && yarn build

      - name: Deploy
        working-directory: ./static/build
        run: |
          scp \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "../../${SERVER_RSA_PATH}" \
            -r \
            favicon.png \
            robots.txt \
            __data.json \
            bootstrap.bundle.min.js.map \
            bootstrap.bundle.min.js \
            main.jpg \
            index.html \
            _app \
            "${NGINX_USERNAME}@${OFER_TO_DOMAIN}:${HTML_STATIC_PATH}"

  build_and_deploy_sudoku:
    needs: ['create_directories']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.CICD_SERVER_PRIVATE_KEY }}

      - name: Install Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18.17'

      - name: Compile
        working-directory: ./sudoku
        run: |
          yarn && yarn build

      - name: Deploy
        working-directory: ./sudoku/build
        run: |
          scp \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "../../${SERVER_RSA_PATH}" \
            -r \
            ./index.html \
            ./favicon.png \
            ./_app \
            "${NGINX_USERNAME}@${OFER_TO_DOMAIN}:${SUDOKU_STATIC_PATH}"

  build_and_deploy_transit_www:
    needs: ['create_directories']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.CICD_SERVER_PRIVATE_KEY }}

      - name: Install Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18.17'

      - name: Compile
        working-directory: ./distance_calculator/www
        run: |
          yarn && yarn production-build

      - name: Deploy
        working-directory: ./distance_calculator/www/build
        run: |
          scp \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "../../../${SERVER_RSA_PATH}" \
            -r \
            index.html \
            favicon.png \
            _app \
            "${NGINX_USERNAME}@${OFER_TO_DOMAIN}:${TRANSIT_STATIC_PATH}"

  build_api:
    needs: ['create_directories']
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker-practice/actions-setup-docker@master

      - name: Create Version
        id: version
        run: |
          MAJOR="$(echo ${GITHUB_REF} | sed -E 's/.*([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')"
          MINOR="$(echo ${GITHUB_REF} | sed -E 's/.*([0-9]+)\.([0-9]+)\.([0-9]+)$/\2/')"
          PATCH="$(echo ${GITHUB_REF} | sed -E 's/.*([0-9]+)\.([0-9]+)\.([0-9]+)$/\3/')"

          VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "VERSION=${VERSION}" >> ${GITHUB_ENV}
          echo "result=${VERSION}" >> ${GITHUB_OUTPUT}

      - name: Build Docker Image
        working-directory: ./api
        run: |
          docker build \
            --file Danofer.run.Dockerfile \
            --tag "${DOCKER_USERNAME}/${API_IMAGE_NAME}:${VERSION}" \
            --tag "${DOCKER_USERNAME}/${API_IMAGE_NAME}:latest" \
            .

      - name: Push Docker Image
        working-directory: ./api
        run: |
          docker login --username="${DOCKER_USERNAME}" --password="${DOCKER_PASSWORD}"

          docker push "${DOCKER_USERNAME}/${API_IMAGE_NAME}:${VERSION}"
          docker push "${DOCKER_USERNAME}/${API_IMAGE_NAME}:latest"

  run_api_and_smtp_docker_images:
    needs: ['build_api']
    runs-on: ubuntu-latest
    env:
      DOCKER_FILE: 'compose.yaml'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.CICD_SERVER_PRIVATE_KEY }}

      - name: Add SMTP Password to ENV_FILE
        working-directory: ./docker
        run: |
          echo "SMTP_PASSWORD='${{ secrets.SMTP_PASSWORD }}'" >> ${ENV_FILE}
        env:
          ENV_FILE: '.smtp.env'

      - name: Deploy ENV_FILE and Docker Compose file
        working-directory: ./docker
        run: |
          scp \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "../${SERVER_RSA_PATH}" \
            -r \
            ${DOCKER_FILE} ${ENV_FILE} \
            "${USERNAME}@${OFER_TO_DOMAIN}:./${DOCKER_RELATIVE_PATH}"
        env:
          ENV_FILE: '.smtp.env'

      - name: Run Local api.ofer.to and SMTP Server
        working-directory: ./docker
        run: |
          ../.github/scripts/run_docker_image
        env:
          DOCKER_IMAGE_NAME: "${{ env.DOCKER_USERNAME }}/${{ env.API_IMAGE_NAME }}"
          DOCKER_COMPOSE_PATH: "${{ env.DOCKER_RELATIVE_PATH }}/${{ env.DOCKER_FILE }}"
          RSA_PATH: "../${{ env.SERVER_RSA_PATH }}"

  build_and_deploy_transit_docker:
    needs: ['create_directories']
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.result }}
    env:
      DOCKER_FILE: 'transit-compose.yaml'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - uses: docker-practice/actions-setup-docker@master

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.CICD_SERVER_PRIVATE_KEY }}

      - name: Create Version
        id: version
        run: |
          MAJOR="$(echo ${GITHUB_REF} | sed -E 's/.*([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')"
          MINOR="$(echo ${GITHUB_REF} | sed -E 's/.*([0-9]+)\.([0-9]+)\.([0-9]+)$/\2/')"
          PATCH="$(echo ${GITHUB_REF} | sed -E 's/.*([0-9]+)\.([0-9]+)\.([0-9]+)$/\3/')"

          VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "VERSION=${VERSION}" >> ${GITHUB_ENV}
          echo "result=${VERSION}" >> ${GITHUB_OUTPUT}

      - name: Build Docker Image
        working-directory: ./distance_calculator/DistanceCalculator
        run: |
          docker build \
            --file Transit.Dockerfile \
            --tag "${DOCKER_USERNAME}/${TRANSIT_API_IMAGE_NAME}:${VERSION}" \
            --tag "${DOCKER_USERNAME}/${TRANSIT_API_IMAGE_NAME}:latest" \
            .

      - name: Push Docker Image
        working-directory: ./distance_calculator/DistanceCalculator
        run: |
          docker login --username="${DOCKER_USERNAME}" --password="${DOCKER_PASSWORD}"

          docker push "${DOCKER_USERNAME}/${TRANSIT_API_IMAGE_NAME}:${VERSION}"
          docker push "${DOCKER_USERNAME}/${TRANSIT_API_IMAGE_NAME}:latest"

      - name: Deploy Docker Compose file
        working-directory: ./distance_calculator/DistanceCalculator
        run: |
          scp \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "../../${SERVER_RSA_PATH}" \
            -r \
            ${DOCKER_FILE} \
            "${USERNAME}@${OFER_TO_DOMAIN}:./${DOCKER_RELATIVE_PATH}"

      - name: Run Local transit-api.ofer.to
        working-directory: ./distance_calculator/DistanceCalculator
        run: |
          ../../.github/scripts/run_docker_image
        env:
          DOCKER_IMAGE_NAME: "${{ env.DOCKER_USERNAME }}/${{ env.TRANSIT_API_IMAGE_NAME }}"
          DOCKER_COMPOSE_PATH: "${{ env.DOCKER_RELATIVE_PATH }}/${{ env.DOCKER_FILE }}"
          RSA_PATH: "../../${{ env.SERVER_RSA_PATH }}"

  prune_docker_images:
    needs: ['build_and_deploy_www', 'build_and_deploy_sudoku', 'build_and_deploy_transit_www', 'run_api_and_smtp_docker_images', 'build_and_deploy_transit_docker']
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.CICD_SERVER_PRIVATE_KEY }}

      - name: Delete Dangling Docker Images
        run: |
          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${NGINX_USERNAME}@${OFER_TO_DOMAIN}" 'docker image prune --force'

  setup_nginx:
    needs: ['build_and_deploy_www', 'build_and_deploy_sudoku', 'build_and_deploy_transit_www', 'run_api_and_smtp_docker_images', 'build_and_deploy_transit_docker']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.CICD_SERVER_PRIVATE_KEY }}

      - name: Deploy TLS Certificate and Private Key
        run: |
          echo "${TLS_CERTIFICATE}" > ${TLS_CERTIFICATE_FILENAME}
          echo "${TLS_PRIVATE_KEY}" > ${TLS_PRIVATE_KEY_FILENAME}

          scp \
            -r \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${TLS_CERTIFICATE_FILENAME}" "${TLS_PRIVATE_KEY_FILENAME}" "${NGINX_USERNAME}@${OFER_TO_DOMAIN}:${TLS_ENCRYPTION_PATH}"
        env:
          TLS_PRIVATE_KEY: ${{ secrets.PROD_TLS_CERTIFICATE_PRIVATE_KEY }}
          TLS_CERTIFICATE: ${{ secrets.PROD_TLS_CERTIFICATE }}
          TLS_PRIVATE_KEY_FILENAME: './ofer_to.private.pem'
          TLS_CERTIFICATE_FILENAME: './star_ofer_to.crt'

      - name: Deploy NGINX Confs
        working-directory: ./nginx_confs
        run: |
          echo "${DH_PARAM_CONTENT}" > "${DH_PARAM_FILENAME}"

          scp \
            -r \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "../${SERVER_RSA_PATH}" \
            ./nginx.conf \
            ./${DH_PARAM_FILENAME} \
            ./sites-available \
            ../sudoku/nginx_confs/sites-available \
            ./nginxconfig.io \
            "${NGINX_USERNAME}@${OFER_TO_DOMAIN}:/etc/nginx"
        env:
          DH_PARAM_CONTENT: ${{ secrets.DH_PARAM }}
          DH_PARAM_FILENAME: 'dhparam.pem'

      - name: Enable sites
        run: |
          # Disable previous sites
          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${NGINX_USERNAME}@${OFER_TO_DOMAIN}" "find /etc/nginx/sites-enabled -type l | xargs rm"

          # Enable the www, api, sudoku, transit, and transit-api sites
          for file in 'www' 'sudoku' 'api' 'transit-www' 'transit-api'; do
            ssh \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -i ${SERVER_RSA_PATH} \
              "${NGINX_USERNAME}@${OFER_TO_DOMAIN}" ln -s "/etc/nginx/sites-available/${file}.conf" /etc/nginx/sites-enabled/${file}.conf
          done

  restart_nginx:
    needs: ['setup_nginx']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/create_server_rsa_key
        with:
          PRIVATE_RSA_KEY_PATH: ${{ env.SERVER_RSA_PATH }}
          PRIVATE_RSA_KEY_CONTENT: ${{ secrets.PROD_STATIC_SERVER_PRIVATE_KEY }}

      - name: Restart NGINX
        run: |
          ssh \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${SERVER_RSA_PATH} \
            "${ROOT_USERNAME}@${OFER_TO_DOMAIN}" systemctl restart nginx
